-- require('utils.globals')
-- local constants = require("utils.constants")
-- local utils = require("utils.utils.tl-utils")
-- local json = require("json")

-- local type BaseStats = record
--   damage: number
--   defense: number
--   health: number
--   total_health: number
--   stamina: number
--   total_stamina: number
-- end


-- local function GetItemDetails(itemId: string): BaseItem

--   local itemDetails = constants.WEAPONS[itemId as WeaponIds] or
--                       constants.ARMORS[itemId as ArmorIds] or
--                       constants.POTIONS[itemId as PotionIds] or
--                       constants.ENERGY[itemId as EnergyIds] or
--                       constants.FOOD[itemId as FoodIds]
--   assert(itemDetails, "Item details not found")
--   return itemDetails
-- end

-- local function IsInRestSpot(userData: UserData): boolean
--   return utils.includes(userData.current_spot, constants.REST_SPOTS)
-- end

-- -- check if user exists
-- local function CheckUserExists(userId: number, address: string): UserData
--   assert(userId, "UserId is required")
--   local user = dbAdmin:exec(string.format([[
--     SELECT * FROM Users WHERE ID = %d;
-- ]], tonumber(userId)))
--   assert(#user > 0, "User does not exist")
--   local userData = user[1] as UserData
--   assert(userData.address == address, "User Address does not match")
--   return userData
-- end

-- local function CalculateUserBaseStats(userData: UserData): BaseStats
--   local baseStats: BaseStats = {
--     damage = 1,
--     defense = 0,
--     health = 2,
--     total_health = 2,
--     stamina = 4,
--     total_stamina = 4,
--   }
--   if userData.nft_address then
--     baseStats.damage = 1
--     baseStats.defense = 0
--     baseStats.health = 2
--     baseStats.total_health = 2
--     baseStats.stamina = 8
--     baseStats.total_stamina = 8
--     if utils.includes(userData.nft_address, constants.ONE_OF_ONE_ASSET_IDS) then
--       baseStats.damage = 2
--       baseStats.total_health = 4
--       baseStats.health = 4
--       baseStats.total_stamina = 16
--       baseStats.stamina = 16
--     end
--   end
--   return baseStats
-- end


-- local function sendUserDataToBackupProcess(userId: number, data: UserData) 
--      ao.send({Target = constants.BACKUP_PROCESS_ID, Action = "Backup.addAndUpdateUsers", UserId = tostring(userId), Data = json.encode(data)})
-- end
-- local function sendInventoryDataToBackupProcess(userId: number, id: number, data: InventoryItem) 
--   ao.send({Target = constants.BACKUP_PROCESS_ID, Action = "Backup.addAndUpdateInventory", UserId = tostring(userId), Id = tostring(id), Data = json.encode(data)})
-- end
-- local function sendBankDataToBackupProcess(userId: number, id: number, data: BankAccountData) 
--   ao.send({Target = constants.BACKUP_PROCESS_ID, Action = "Backup.addAndUpdateBank", UserId = tostring(userId), Id = tostring(id), Data = json.encode(data)})
-- end
-- local function sendBankTransactionsToBackupProcess(userId: number, id: number, data: BankTransaction)  
--   ao.send({Target = constants.BACKUP_PROCESS_ID, Action = "Backup.addAndUpdateBankTransactions", UserId = tostring(userId), Id = tostring(id), Data = json.encode(data)})
-- end

-- --[[
--      calculate dumz reward for killing enemy
--      randomize based on difficulty
--    ]]
-- -- TODO: Implement this function



-- local function getNFTBankAmountForNFT(nft_address: string | nil): (number, number)
--   if nft_address == nil then
--     return 0, 0
--   end
--   if utils.includes(nft_address, constants.ONE_OF_ONE_ASSET_IDS) then
--     return 10000, 5000
--   end
--   for _, address in ipairs(GreenAddresses) do
--     if address == nft_address then
--       return 1000, 1000
--     end
--   end
--   for _, address in ipairs(AgentAddresses) do
--     if address == nft_address then
--       return 2000, 1500
--     end
--   end
--   for _, address in ipairs(BlueAddresses) do
--     if address == nft_address then
--       return 3000, 1500
--     end
--   end
--   for _, address in ipairs(PurpleAddresses) do
--     if address == nft_address then
--       return 2500, 1500
--     end
--   end
--   for _, address in ipairs(RedAddresses) do
--     if address == nft_address then
--       return 3500, 1500
--     end
--   end
--   for _, address in ipairs(GoldAddresses) do
--     if address == nft_address then
--       return 5000, 2500
--     end
--   end
--   return 0, 0
-- end

-- return {
--   Leaderboard = Leaderboard,
--   CheckUserExists = CheckUserExists,
--   CalculateUserBaseStats = CalculateUserBaseStats,
--   sendUserDataToBackupProcess = sendUserDataToBackupProcess,
--   sendInventoryDataToBackupProcess = sendInventoryDataToBackupProcess,
--   sendBankDataToBackupProcess = sendBankDataToBackupProcess,
--   sendBankTransactionsToBackupProcess = sendBankTransactionsToBackupProcess,
--   GetItemDetails = GetItemDetails,
--   IsInRestSpot = IsInRestSpot,
--   getNFTBankAmountForNFT = getNFTBankAmountForNFT,
-- }